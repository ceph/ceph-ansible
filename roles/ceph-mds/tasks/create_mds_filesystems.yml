---
- name: check and deploy filesystem pools
  delegate_to: "{{ groups[mon_group_name][0] }}"
  block:
    - name: deploy filesystem pools
      when: fs_pools_created is not defined
      block:
        - import_role:
            name: ceph-facts
            tasks_from: get_def_crush_rule_name.yml

        - name: create filesystem pools
          ceph_pool:
            name: "{{ item.name }}"
            state: present
            cluster: "{{ cluster }}"
            pg_num: "{{ item.pg_num | default(osd_pool_default_pg_num) if not item.0.pg_autoscale_mode | default(False) | bool else 16 }}"
            pgp_num: "{{ item.pgp_num | default(item.pg_num) | default(osd_pool_default_pg_num) if not item.pg_autoscale_mode | default(False) | bool else omit }}"
            size: "{{ item.size | default(omit) }}"
            min_size: "{{ item.min_size | default(omit) }}"
            pool_type: "{{ item.type | default('replicated') }}"
            rule_name: "{{ item.rule_name | default(omit) }}"
            erasure_profile: "{{ item.erasure_profile | default(omit) }}"
            pg_autoscale_mode: "{{ item.pg_autoscale_mode | default(omit) }}"
            target_size_ratio: "{{ item.target_size_ratio | default(omit) }}"
          with_items: "{{ cephfs_pools }}"
          environment:
            CEPH_CONTAINER_IMAGE: "{{ ceph_docker_registry + '/' + ceph_docker_image + ':' + ceph_docker_image_tag if containerized_deployment else None }}"
            CEPH_CONTAINER_BINARY: "{{ container_binary }}"

- name: check and create ceph filesystem
  delegate_to: "{{ groups[mon_group_name][0] }}"
  block:
    - name: check if ceph filesystem already exists
      command: "{{ ceph_run_cmd }} --cluster {{ cluster }} fs get {{ cephfs }}"
      register: check_existing_cephfs
      changed_when: false
      failed_when: false

    - name: create ceph filesystem
      command: "{{ ceph_run_cmd }} --cluster {{ cluster }} fs new {{ cephfs }} {{ cephfs_metadata_pool.name }} {{ cephfs_data_pool.name }}"
      changed_when: false
      when: check_existing_cephfs.rc != 0

- name: set max_mds
  command: "{{ ceph_run_cmd }} --cluster {{ cluster }} fs set {{ cephfs }} max_mds {{ mds_max_mds }}"
  changed_when: false
  delegate_to: "{{ groups[mon_group_name][0] }}"
  when:
    - mds_max_mds > 1
    - not rolling_update
