---
# You can override default vars defined in defaults/main.yml here,
# but I would advice to use host or group vars instead

####################
# OSD CRUSH LOCATION
####################

# The following options will build a ceph.conf with OSD sections
#
# The default options are useful when you colocate SSD and SATA disk on the same machine
# This will generate:
# [osd.X]
# osd crush location = "root=ssd host={{ ansible_hostname }}-ssd'"
# [osd.X]
# osd crush location = "root=ssd host={{ ansible_hostname }}-sata'"
#
# You can pass what ever option you want, you can also imagine something like this
# osd_crush_location: "'root=dc rack=foo host={{ ansible_hostname }}'"

crush_location: false
osd_crush_location:
  - "'root=ssd host={{ ansible_hostname }}-ssd'"
  - "'root=sata host={{ ansible_hostname }}-sata'"

##############
# CEPH OPTIONS
##############

# ACTIVATE THE FSID VARIABLE FOR NON-VAGRANT DEPLOYMENT
fsid: "{{ cluster_uuid.stdout }}"
cephx: true

# Devices to be used as OSDs
# You can pre-provision disks that are not present yet.
# Ansible will just skip them. Newly added disk will be
# automatically configured during the next run.
#


# !! WARNING !!
#
# /!\ ENABLE ONLY ONE SCENARIO AT A TIME /!\
#
# !! WARNING !!

# USE WITH CAUTION
# Erase partitions structure and layout of the given devices below prior to prepare them
zap_devices: false

# Declare devices
# All the scenarii inherit from the following device declaration
#
devices:
  - /dev/sdb
  - /dev/sdc

# Device discovery is based on the Ansible fact 'ansible_devices'
# which reports all the devices on a system. If chosen all the disks
# found will be passed to ceph-disk. You should not be worried on using
# this option since ceph-disk has a built-in check which looks for empty devices.
# Thus devices with existing partition tables will not be used.
# This mode prevents you from filling out the 'devices' variable above.
#
osd_auto_discovery: false

# I. First scenario: journal and osd_data on the same device
# Use 'true' to enable this scenario
# This will collocate both journal and data on the same disk
# creating a partition at the beginning of the device

journal_collocation: true


# II. Second scenario: single journal device for N OSDs
# Use 'true' to enable this scenario

# deprecated, please use scenario III with a single raw_journal_device


# III. Third scenario: N journal devices for N OSDs
# Use 'true' to enable this scenario
#
# In the following example:
# * sdd and sde will get sdb as a journal
# * sdf and sdg will get sdc as a journal
# While starting you have 2 options:
# 1. Pre-allocate all the devices
# 2. Progressively add new devices

raw_multi_journal: false
raw_journal_devices:
  - /dev/sdb
  - /dev/sdb
  - /dev/sdc
  - /dev/sdc


# IV. Fourth scenario: use directory instead of disk for OSDs
# Use 'true' to enable this scenario

osd_directory: false
osd_directories:
  - /var/lib/ceph/osd/mydir1
  - /var/lib/ceph/osd/mydir2
  - /var/lib/ceph/osd/mydir3
  - /var/lib/ceph/osd/mydir4
