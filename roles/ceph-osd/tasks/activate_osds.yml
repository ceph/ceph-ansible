---
# NOTE (leseb) : this task is for disk devices only because of the explicit use of the first
# partition.

- name: automatically activate osd disk(s) without partitions (legacy)
  command: ceph-disk activate "{{ item | regex_replace('^(\/dev\/cciss\/c[0-9]{1}d[0-9]{1})$', '\\1p') }}1"
  ignore_errors: true
  with_items: "{{ legacy_devices }}"
  when:
    - "{{ legacy_devices|length > 0 }}"
    - journal_collocation
    - osd_auto_discovery


- name: automatically activate osd disk(s) without partitions (native)
  command: ceph-disk activate "{{ item }}-part1"
  ignore_errors: true
  with_items: "{{ storage_devices }}"
  when:
    - "{{ storage_devices|length > 0 }}"
    - journal_collocation
    - osd_auto_discovery


- name: activate osd(s) when device is a disk (legacy)
  command: ceph-disk activate {{ item | regex_replace('^(\/dev\/cciss\/c[0-9]{1}d[0-9]{1})$', '\\1p') }}1
  with_items:
    - "{{ legacy_devices | unique }}"
  changed_when: false
  failed_when: false
  register: activate_osd_disk
  when:
    - "{{ legacy_devices|length > 0 }}"
    - not osd_auto_discovery
    - raw_multi_journal

- name: activate osd(s) when device is a disk (native)
  command: ceph-disk activate "{{ item }}-part1"
  with_items:
    - "{{ storage_devices + devices_to_activate }}"
  changed_when: false
  failed_when: false
  register: activate_osd_disk
  when:
    - ("{{ storage_devices }} | length > 0" or "{{ devices_to_activate }} | length > 0")
    - not osd_auto_discovery
    - raw_multi_journal


- name: automatically activate osd disk(s) without partitions (dmcrypt)
  command: ceph-disk activate --dmcrypt "{{ item }}"
  ignore_errors: true
  with_items: "{{ legacy_devices + storage_devices }}"
  when:
    - osd_auto_discovery
    - dmcrypt_journal_collocation

- name: activate osd(s) when device is a disk (dmcrypt + legacy)
  command: ceph-disk activate --dmcrypt {{ item | regex_replace('^(\/dev\/cciss\/c[0-9]{1}d[0-9]{1})$', '\\1p') }}1
  with_items:
    - "{{ legacy_devices | unique }}"
  changed_when: false
  failed_when: false
  register: activate_osd_disk_dmcrypt
  when:
    - "{{ legacy_devices|length > 0 }}"
    - not osd_auto_discovery
    - dmcrypt_dedicated_journal

- name: activate osd(s) when device is a disk (dmcrypt + native)
  command: ceph-disk activate --dmcrypt {{ item }}-part1
  with_items:
    - "{{ storage_devices + devices_to_activate }}"
  changed_when: false
  failed_when: false
  register: activate_osd_disk_dmcrypt
  when:
    - ("{{ storage_devices }} | length > 0" or "{{ devices_to_activate }} | length > 0")
    - not osd_auto_discovery
    - dmcrypt_dedicated_journal

# NOTE (leseb): we must do this because of
# https://github.com/ansible/ansible/issues/4297
- name: combine ispartition results
  set_fact:
    combined_activate_osd_disk_results: "{{ activate_osd_disk if not dmcrypt_journal_collocation else activate_osd_disk_dmcrypt }}"

- name: fail if ceph-disk cannot create an OSD
  fail:
    msg: "ceph-disk failed to create an OSD"
  when:
    " 'ceph-disk: Error: ceph osd create failed' in item.get('stderr', '') "
  with_items: "{{ (combined_activate_osd_disk_results|default({})).results|default([]) }}"

# NOTE (leseb): this task is for partitions because we don't explicitly use a partition.
- name: activate osd(s) when device is a partition (legacy)
  command: "ceph-disk activate {{ item }}"
  with_items:
    - "{{ legacy_devices |unique }}"
  changed_when: false
  failed_when: false
  when:
    - "{{ legacy_devices|length > 0 }}"
    - not osd_auto_discovery

- name: activate osd(s) when device is a partition (native)
  command: "ceph-disk activate {{ item }}-part1"
  with_items:
    - "{{ storage_devices + devices_to_activate }}"
  changed_when: false
  failed_when: false
  when:
    - ("{{ storage_devices }} | length > 0" or "{{ devices_to_activate }} | length > 0")
    - not osd_auto_discovery

- include: osd_fragment.yml
  when: crush_location

- name: get osd id
  shell: |
    ls /var/lib/ceph/osd/ | sed 's/.*-//'
  changed_when: false
  failed_when: false
  always_run: true
  register: osd_id

- name: start and add that the osd service(s) to the init sequence
  service:
    name: ceph-osd@{{ item }}
    state: started
    enabled: yes
  with_items: "{{ (osd_id|default({})).stdout_lines|default([]) }}"
  changed_when: false
