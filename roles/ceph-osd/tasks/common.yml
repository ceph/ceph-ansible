---
- name: create bootstrap-osd and osd directories
  file:
    path: "{{ item }}"
    state: directory
    owner: "{{ ceph_uid if containerized_deployment else 'ceph' }}"
    group: "{{ ceph_uid if containerized_deployment else 'ceph' }}"
    mode: "0755"
  when: cephx | bool
  with_items:
    - /var/lib/ceph/bootstrap-osd/
    - /var/lib/ceph/osd/

- name: copy ceph key(s) if needed
  copy:
    src: "{{ fetch_directory }}/{{ fsid }}/{{ item.name }}"
    dest: "{{ item.name }}"
    owner: "{{ ceph_uid if containerized_deployment else 'ceph' }}"
    group: "{{ ceph_uid if containerized_deployment else 'ceph' }}"
    mode: "{{ ceph_keyring_permissions }}"
  with_items:
    - { name: "/var/lib/ceph/bootstrap-osd/{{ cluster }}.keyring", copy_key: true }
    - { name: "/etc/ceph/{{ cluster }}.client.admin.keyring", copy_key: "{{ copy_admin_key }}" }
  when:
    - cephx | bool
    - item.copy_key | bool

- name: add devices to gpt_check_devices_list
  set_fact:
    gpt_check_devices_list: "{{ gpt_check_devices_list | default([]) + [item] }}"
  with_items: "{{ devices | default([]) }}"

- name: add lvm_volumes data devices in gpt_check_devices_list
  set_fact:
    gpt_check_devices_list: "{{ gpt_check_devices_list | default([]) + [item.data] }}"
  with_items: "{{ lvm_volumes | default([]) }}"
  when: item.data_vg is undefined

- block:
    - name: check if gpt header is present
      command: blkid -t PTTYPE=\"gpt\" {{ item }}
      with_items: "{{ gpt_check_devices_list }}"
      register: gpt_status
      failed_when: false

    - name: remove gpt header if present
      command: parted -s "{{ item.item }}" mklabel msdos
      with_items: "{{ gpt_status.results }}"
      when:
        - item.rc is defined
        - item.rc == 0
  when: gpt_check_devices_list is defined
