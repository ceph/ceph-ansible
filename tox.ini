[tox]
envlist = {jewel,luminous,rhcs}-{centos,ubuntu}-{container,non_container}-{all_daemons,cluster,filestore_osds,update,purge_filestore,purge,ooo_collocation,shrink_mon,shrink_osd,collocation}
  {luminous,rhcs}-{centos,ubuntu}-{container,non_container}-{bluestore_osds,bluestore_lvm_osds,lvm_osds,purge_lvm_osds,purge_bluestore}
  {jewel,luminous}-{centos,ubuntu}-non_container-switch_to_containers
  infra_lv_create

skipsdist = True

# a test scenario for the lv-create.yml and lv-teardown playbooks
[testenv:infra_lv_create]
whitelist_externals =
    vagrant
    bash
    cp
    mkdir
    cat
passenv=*
setenv=
  ANSIBLE_SSH_ARGS = -F {changedir}/vagrant_ssh_config
  ANSIBLE_CONFIG = -F {toxinidir}/ansible.cfg
  ANSIBLE_ACTION_PLUGINS = {toxinidir}/plugins/actions
  ANSIBLE_CALLBACK_PLUGINS = {toxinidir}/plugins/callback
  ANSIBLE_CALLBACK_WHITELIST = profile_tasks
  # only available for ansible >= 2.2
  ANSIBLE_STDOUT_CALLBACK = debug
deps= -r{toxinidir}/tests/requirements.txt
changedir={toxinidir}/tests/functional/centos/7/infra_lv_create
commands=
  vagrant up --no-provision {posargs:--provider=virtualbox}
  bash {toxinidir}/tests/scripts/generate_ssh_config.sh {changedir}

  cp {toxinidir}/infrastructure-playbooks/lv-create.yml {toxinidir}/lv-create.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/lv-create.yml

  cp {toxinidir}/infrastructure-playbooks/lv-teardown.yml {toxinidir}/lv-teardown.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/lv-teardown.yml --extra-vars "ireallymeanit=yes"

  cat {toxinidir}/lv-create.log

  vagrant destroy --force

# extra commands for purging clusters
# that purge the cluster and then set it up again to
# ensure that a purge can clear nodes well enough that they
# can be redployed to.
[purge]
commands=
  cp {toxinidir}/infrastructure-playbooks/{env:PURGE_PLAYBOOK:purge-cluster.yml} {toxinidir}/{env:PURGE_PLAYBOOK:purge-cluster.yml}
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PURGE_PLAYBOOK:purge-cluster.yml} --extra-vars "\
      ireallymeanit=yes \
      remove_packages=yes \
      ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
  "

  # set up the cluster again
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PLAYBOOK:site.yml.sample} --extra-vars "\
      ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
      ceph_dev_branch={env:CEPH_DEV_BRANCH:master} \
      ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} \
  "
  # test that the cluster can be redeployed in a healthy state
  testinfra -n 4 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts {toxinidir}/tests/functional/tests

[purge-lvm]
commands=
  cp {toxinidir}/infrastructure-playbooks/{env:PURGE_PLAYBOOK:purge-cluster.yml} {toxinidir}/{env:PURGE_PLAYBOOK:purge-cluster.yml}
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PURGE_PLAYBOOK:purge-cluster.yml} --extra-vars "\
      ireallymeanit=yes \
      remove_packages=yes \
      ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
  "

  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/lvm_setup.yml

  # set up the cluster again
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PLAYBOOK:site.yml.sample} --extra-vars "\
      ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
      ceph_dev_branch={env:CEPH_DEV_BRANCH:master} \
      ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} \
  "
  # test that the cluster can be redeployed in a healthy state
  testinfra -n 4 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts {toxinidir}/tests/functional/tests

# extra commands for performing a rolling update
# currently this hardcodes the release to kraken
# as we're still installing jewel by default
[update]
commands=
  cp {toxinidir}/infrastructure-playbooks/rolling_update.yml {toxinidir}/rolling_update.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/rolling_update.yml --extra-vars "\
      ireallymeanit=yes \
      ceph_stable_release={env:UPDATE_CEPH_STABLE_RELEASE:kraken} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:UPDATE_CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:UPDATE_CEPH_DOCKER_IMAGE_TAG:latest} \
      ceph_dev_branch={env:UPDATE_CEPH_DEV_BRANCH:master} \
      ceph_dev_sha1={env:UPDATE_CEPH_DEV_SHA1:latest} \
  "

  bash -c "CEPH_STABLE_RELEASE={env:UPDATE_CEPH_STABLE_RELEASE:luminous} testinfra -n 4 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts {toxinidir}/tests/functional/tests"

[shrink-mon]
commands=
  cp {toxinidir}/infrastructure-playbooks/shrink-mon.yml {toxinidir}/shrink-mon.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/shrink-mon.yml --extra-vars "\
      ireallymeanit=yes \
      mon_to_kill={env:MON_TO_KILL:ceph-mon2} \
  "
[shrink-osd]
commands=
  cp {toxinidir}/infrastructure-playbooks/shrink-osd.yml {toxinidir}/shrink-osd.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/shrink-osd.yml --extra-vars "\
      ireallymeanit=yes \
      osd_to_kill=0 \
  "

[switch-to-containers]
commands=
  cp {toxinidir}/infrastructure-playbooks/switch-from-non-containerized-to-containerized-ceph-daemons.yml {toxinidir}/switch-from-non-containerized-to-containerized-ceph-daemons.yml
  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/switch-from-non-containerized-to-containerized-ceph-daemons.yml --extra-vars "\
      ireallymeanit=yes \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
      ceph_dev_branch={env:CEPH_DEV_BRANCH:master} \
      ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} \
  "

  testinfra -n 4 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts-switch-to-containers {toxinidir}/tests/functional/tests

[testenv]
whitelist_externals =
    vagrant
    bash
    pip
    cp
    sleep
passenv=*
sitepackages=True
setenv=
  ANSIBLE_SSH_ARGS = -F {changedir}/vagrant_ssh_config
  ANSIBLE_CONFIG = {toxinidir}/ansible.cfg
  ANSIBLE_ACTION_PLUGINS = {toxinidir}/plugins/actions
  ANSIBLE_CALLBACK_PLUGINS = {toxinidir}/plugins/callback
  ANSIBLE_CALLBACK_WHITELIST = profile_tasks
  # only available for ansible >= 2.2
  ANSIBLE_STDOUT_CALLBACK = debug
  ansible2.2: DELEGATE_FACTS_HOST = False
  ANSIBLE_CACHE_PLUGIN = memory
  ANSIBLE_GATHERING = implicit
  centos: CEPH_ANSIBLE_VAGRANT_BOX = centos/7
  ubuntu: CEPH_ANSIBLE_VAGRANT_BOX = ceph/ubuntu-xenial
  ubuntu: INVENTORY = hosts-ubuntu
  centos: INVENTORY = hosts
  container: PLAYBOOK = site-docker.yml.sample
  container: CONTAINER_DIR = /container


  container-shrink: MON_TO_KILL = mon2
  container-shrink_osd: COPY_ADMIN_KEY = True
  shrink_osd: COPY_ADMIN_KEY = True

  rhcs: CEPH_STABLE_RELEASE = luminous
  jewel: CEPH_STABLE_RELEASE = jewel
  jewel: CEPH_DOCKER_IMAGE_TAG = latest-jewel
  jewel: UPDATE_CEPH_STABLE_RELEASE = luminous
  jewel: UPDATE_CEPH_DOCKER_IMAGE_TAG = latest-luminous
  jewel: CEPH_DOCKER_IMAGE_TAG_BIS = latest-bis-jewel
  luminous: CEPH_STABLE_RELEASE = luminous
  luminous: CEPH_DOCKER_IMAGE_TAG = latest-luminous
  luminous: CEPH_DOCKER_IMAGE_TAG_BIS = latest-bis-luminous
  luminous: UPDATE_CEPH_STABLE_RELEASE = luminous
  luminous: UPDATE_CEPH_DOCKER_IMAGE_TAG = latest
  lvm_osds: CEPH_STABLE_RELEASE = luminous
  bluestore_lvm_osds: CEPH_STABLE_RELEASE = luminous
  update: ROLLING_UPDATE = True
deps= -r{toxinidir}/tests/requirements.txt
changedir=
  all_daemons: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  update: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  cluster: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  filestore_osds: {toxinidir}/tests/functional/fs-osds{env:CONTAINER_DIR:}
  bluestore_osds: {toxinidir}/tests/functional/bs-osds{env:CONTAINER_DIR:}
  purge_filestore_osds: {toxinidir}/tests/functional/fs-osds{env:CONTAINER_DIR:}
  purge_bluestore_osds: {toxinidir}/tests/functional/bs-osds{env:CONTAINER_DIR:}
  shrink_mon: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  shrink_osd: {toxinidir}/tests/functional/shrink_osd{env:CONTAINER_DIR:}
  collocation: {toxinidir}/tests/functional/collocation{env:CONTAINER_DIR:}
  purge: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  switch_to_containers: {toxinidir}/tests/functional/all_daemons{env:CONTAINER_DIR:}
  lvm_osds: {toxinidir}/tests/functional/lvm-osds{env:CONTAINER_DIR:}
  bluestore_lvm_osds: {toxinidir}/tests/functional/bs-lvm-osds{env:CONTAINER_DIR:}
  purge_lvm_osds: {toxinidir}/tests/functional/lvm-osds{env:CONTAINER_DIR:}
  ooo_collocation: {toxinidir}/tests/functional/ooo-collocation

commands=
  rhcs: ansible-playbook -vv -i "localhost," -c local {toxinidir}/tests/functional/rhcs_setup.yml --extra-vars "change_dir={changedir}" --tags "vagrant_setup"

  vagrant up --no-provision {posargs:--provider=virtualbox}
  bash {toxinidir}/tests/scripts/generate_ssh_config.sh {changedir}

  lvm_osds: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/lvm_setup.yml
  bluestore_lvm_osds: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/lvm_setup.yml
  purge_lvm_osds: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/lvm_setup.yml

  rhcs: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/rhcs_setup.yml --extra-vars "ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} repo_url={env:REPO_URL:} rhel7_repo_url={env:RHEL7_REPO_URL:}" --skip-tags "vagrant_setup"

  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/setup.yml

  ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PLAYBOOK:site.yml.sample} --extra-vars "\
      delegate_facts_host={env:DELEGATE_FACTS_HOST:True} \
      fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} \
      ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} \
      ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} \
      ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} \
      ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG:latest} \
      ceph_dev_branch={env:CEPH_DEV_BRANCH:master} \
      ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} \
      copy_admin_key={env:COPY_ADMIN_KEY:False} \
  "

  # wait 30sec for services to be ready
  all_daemons: sleep 30
  # test cluster state using ceph-ansible tests
  all_daemons: testinfra -n 8 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts {toxinidir}/tests/functional/tests

  # reboot all vms
  all_daemons: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/tests/functional/reboot.yml

  # wait 30sec for services to be ready
  all_daemons: sleep 30
  # retest to ensure cluster came back up correctly after rebooting
  all_daemons: testinfra -n 8 --sudo -v --connection=ansible --ansible-inventory={changedir}/hosts {toxinidir}/tests/functional/tests

  # handlers/idempotency test
  all_daemons: ansible-playbook -vv -i {changedir}/hosts {toxinidir}/{env:PLAYBOOK:site.yml.sample} --extra-vars "delegate_facts_host={env:DELEGATE_FACTS_HOST:True} fetch_directory={env:FETCH_DIRECTORY:{changedir}/fetch} ceph_stable_release={env:CEPH_STABLE_RELEASE:luminous} ceph_docker_registry={env:CEPH_DOCKER_REGISTRY:docker.io} ceph_docker_image={env:CEPH_DOCKER_IMAGE:ceph/daemon} ceph_docker_image_tag={env:CEPH_DOCKER_IMAGE_TAG_BIS:latest-bis} ceph_dev_branch={env:CEPH_DEV_BRANCH:master} ceph_dev_sha1={env:CEPH_DEV_SHA1:latest} copy_admin_key={env:COPY_ADMIN_KEY:False} " --extra-vars @ceph-override.json

  purge: {[purge]commands}
  purge_filestore: {[purge]commands}
  purge_bluestore: {[purge]commands}
  purge_lvm_osds: {[purge-lvm]commands}
  switch_to_containers: {[switch-to-containers]commands}
  update: {[update]commands}
  shrink_mon: {[shrink-mon]commands}
  shrink_osd: {[shrink-osd]commands}

  vagrant destroy --force
